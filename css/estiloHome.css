/* Barra de Rolagem */
body::-webkit-scrollbar {
  width: 1em;
  -webkit-overflow-scrolling: touch; /* deixa a rolagem suave */
}

body::-webkit-scrollbar-track {
  box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
}

body::-webkit-scrollbar-thumb {
  background-color: darkgrey;
  outline: 1px solid slategrey;
}

/* Header */
#iconeHeader {
  width: 650px;
}

#header {
  background-color: #434343;
  height: 110px;
  width: 1350px;
  position: fixed;
}

/* Body */
body {
  margin: 0;
  padding: 0;
  background: #232323;
  color: #cdcdcd;
  font-family: "Avenir Next", "Avenir", sans-serif;
  -webkit-overflow-scrolling: touch;
}

/* Menu */
a {
  text-decoration: none;
}

#menuToggle {
  display: block;
  position: fixed;
  top: 50px;
  left: 50px;

  z-index: 3;

  -webkit-user-select: none;
  user-select: none;
}

#menuToggle a {
  text-decoration: none;
  color: whitesmoke;

  transition: color 0.3s ease;
}

#menuToggle a:hover {
  color: rgb(58, 58, 58);
}


#menuToggle input {
  display: block;
  width: 40px;
  height: 32px;
  position: absolute;
  top: -7px;
  left: -5px;

  cursor: pointer;

  opacity: 0;
  /* hide this */
  z-index: 2;
  /* and place it over the hamburger */

  -webkit-touch-callout: none;
}

/*
  * Just a quick hamburger
  */
#menuToggle span {
  display: block;
  width: 33px;
  height: 4px;
  margin-bottom: 5px;
  position: relative;

  background: #ffffff;
  border-radius: 3px;

  z-index: 1;

  transform-origin: 4px 0px;

  transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1.0),
    background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1.0),
    opacity 0.55s ease;
}

#menuToggle span:first-child {
  transform-origin: 0% 0%;
}

#menuToggle span:nth-last-child(2) {
  transform-origin: 0% 100%;
}

/* 
  * Transform all the slices of hamburger
  * into a crossmark.
  */
#menuToggle input:checked~span {
  opacity: 1;
  transform: rotate(45deg) translate(-2px, -1px);
  background: #ffffff;
}

/*
  * But let's hide the middle one.
  */
#menuToggle input:checked~span:nth-last-child(3) {
  opacity: 0;
  transform: rotate(0deg) scale(0.2, 0.2);
}

/*
  * Ohyeah and the last one should go the other direction
  */
#menuToggle input:checked~span:nth-last-child(2) {
  transform: rotate(-45deg) translate(0, -1px);
}

/*
  * Make this absolute positioned
  * at the top left of the screen
  */
#menu {
  position: fixed;
  width: 300px;
  margin: -100px 0 0 -50px;
  padding: 50px;
  padding-top: 125px;
  height: 1500px;
  position: absolute;
  top: 0;


  background: #7d7d7d;
  list-style-type: none;
  -webkit-font-smoothing: antialiased;


  transform-origin: 0% 0%;
  transform: translate(-100%, 0);

  transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1.0);
}

#menu li {
  padding: 10px 0;
  font-size: 22px;
}

/*
  * And let's slide it in from the left
  */
#menuToggle input:checked~ul {
  transform: none;
}

body {
  margin: 0;
  padding: 0;
  background: #232323;
  color: #cdcdcd;
  font-family: "Avenir Next", "Avenir", sans-serif;
}

header {
  position: relative;
  z-index: 3;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 50px;
  background: #232323;
}

#menuToggle {
  position: absolute;
  left: 50px;
  z-index: 1;
  -webkit-user-select: none;
  user-select: none;
}

#title {
  color: #cdcdcd;
  text-align: center;
  margin-top: 22px;
  font-family: 'Titulo';
}

/* Body 2 */
#esquerdoImagem {
  position: relative;
}

#esquerdoImagem::after {
  content: "";
  background: linear-gradient(to right, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0.5));
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
}

.textoSobreVideo {
  position: absolute;
  top: 50%;
  left: 38%;
  transform: translate(-50%, -50%);
  color: white;
  z-index: 2;
  font-size: 55px;
  padding: 15px;
}

/* CARDS */

.card {
  color: rgb(255, 255, 255);
  width: 100%;
  height: 300px;
  width: 356px;
  border: 2px solid #0b0b0b;
  /* Cor sólida */
  border-radius: 10px;
  /* Borda arredondada */
  padding: 10px;
  /* Espaçamento interno para o conteúdo */
  box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);
  /* Sombra */
}

.card-body {
  position: relative;
  z-index: 2;
}

/* CARD1 */

#card1 {
  background-size: cover;
  background-size: 100% 100%;
  transition: background-size 0.7s;
}

#coluna1 :hover {
  background-size: 120% 150%;
}

#card1::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  /* Preto semi-transparente */
  z-index: 1;

}

/* CARD 2 */

#card2 {
  background-size: cover;
  background-size: 100% 100%;
  transition: background-size 0.7s;
}

#coluna2 :hover {
  background-size: 120% 150%;
}

#card2::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  /* Preto semi-transparente */
  z-index: 1;
}

/* CARD 3 */

#card3 {
  /* A propriedade background-size define o tamanho da imagem de fundo. */
  /* O valor 'cover' faz com que a imagem de fundo seja redimensionada para cobrir completamente o elemento, mesmo que isso signifique que a imagem será cortada. */
  background-size: cover;
  /* Aqui, a imagem de fundo é redimensionada para preencher completamente o elemento. */
  background-size: 100% 100%;
  /* A propriedade transition faz com que as mudanças na propriedade background-size ocorram suavemente ao longo de 0.7 segundos. */
  transition: background-size 0.7s;
}

#coluna3 :hover {
  /* Quando o mouse passa por cima do elemento com o id 'coluna3', a imagem de fundo é redimensionada para 120% da largura original e 150% da altura original. */
  background-size: 120% 150%;
}

#card3::before {
  /* A propriedade content é usada com os pseudo-elementos ::before e ::after, para inserir conteúdo gerado. Neste caso, está vazio. */
  content: "";
  /* A propriedade position define como um elemento é posicionado no layout. O valor 'absolute' posiciona o elemento em relação ao elemento pai mais próximo que tem uma posição diferente de 'static'. */
  position: absolute;
  /* A propriedade top define a distância do topo do elemento em relação ao topo do seu elemento pai posicionado mais próximo. */
  top: 0;
  /* A propriedade left define a distância da esquerda do elemento em relação à esquerda do seu elemento pai posicionado mais próximo. */
  left: 0;
  /* A propriedade width define a largura do elemento. */
  width: 100%;
  /* A propriedade height define a altura do elemento. */
  height: 100%;
  /* A propriedade background define a cor de fundo do elemento. Neste caso, é um preto semi-transparente. */
  background: rgba(0, 0, 0, 0.7);
  /* Preto semi-transparente */
  /* A propriedade z-index define a ordem de empilhamento dos elementos. Um elemento com um valor maior de z-index estará na frente de um elemento com um valor menor. */
  z-index: 1;
}